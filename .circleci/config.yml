version: 2.1
orbs:
  slack: circleci/slack@4.1.1

            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build-6e81ff8
      - run:
          name: Build front-end
          command: |
            cd frontend
            rm -rf node_modules/                  
            npm install
            npm run build    
            
      - slack/notify:
          event: fail          
          mentions: 'Build Failed'
          template: basic_fail_1        
      - save_cache:
          paths:
            - frontend/node_modules
            - frontend/dist
          key: frontend-build-6e81ff8

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
    - checkout
    - restore_cache:
        keys: 
          - backend-build-6e81ff8
    - run:
        name: Back-end build
        command: |
          cd backend        
          npm install          
          npm run build
    - slack/notify:
          event: fail          
          mentions: 'Build Failed'
          template: basic_fail_1 
    - save_cache:
          paths: 
            - backend/node_modules
            - backend/dist
          key: backend-build-6e81ff8
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build-6e81ff8
      - run:
          name: Test front-end
          command: |
            cd frontend     
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
    - checkout
    - restore_cache:
        keys: 
          - backend-build-6e81ff8
    - run:
        name: Test Back-end
        command: |
          cd backend          
          npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build-6e81ff8
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm update        
            npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build-6e81ff8
      - run:
          name: Scan backend
          command: |
            cd backend
            npm update
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Installing dependencies
          command: |
            yum install -y tar gzip curl
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name backend-6e81ff8 \
              --parameter-overrides ID="6e81ff8"                
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name frontend-6e81ff8 \
              --parameter-overrides ID="6e81ff8"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            INSTANCE_IP=$(aws ec2 describe-instances --region eu-west-1 \
            --filters "Name=tag:Name,Values=backend-6e81ff8" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)
            echo ${INSTANCE_IP} >> .circleci/ansible/inventory.txt
            
            ls ~/project/.circleci/ansible/            
            cat ~/project/.circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt              
            curl -H "Content-Type: text/plain" \
               -H "token: 6e81ff8" \
               --request PUT \
               --data ${INSTANCE_IP} \
               https://api.memstash.io/values/instance_ip
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure 

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11        
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "e9:1e:77:66:76:a0:f9:77:ec:ba:6c:19:f8:e7:27:d7"
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run: cat /tmp/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            
      - run:
          name: Configure server
          command: |
            echo printenv
            printenv >> ./backend/.env
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
            
      # Here's where you will add some code to rollback on failure  

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install awscli
          command: |
            sudo apt-get -y update
            sudo apt-get -y install python3 \
              python3-pip \
              python3-setuptools \
              curl
            pip3 install --upgrade pip
            pip3 --no-cache-dir install --upgrade awscli
      - restore_cache:
          keys: 
            - backend-build-6e81ff8
      - run:
          name: Run migrations
          command: |
            echo printenv
            printenv >> ./backend/.env
            cd backend
            npm run migrations >> migration.txt
            cat migration.txt            
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            echo migration-6e81ff8
            if grep -q "has been executed successfully." migration.txt
            then
            curl -H "Content-Type: text/plain" -H "token: 6e81ff8" \
            --request PUT \
            --data "1" https://api.memstash.io/values/migration-6e81ff8
            else
            curl -H "Content-Type: text/plain" -H "token: 6e81ff8" \
            --request PUT \
            --data "0" https://api.memstash.io/values/migration-6e81ff8
            fi
     # Here's where you will add some code to rollback on failure
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install gzip tar python3-pip curl -y
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install nodejs npm -y
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: 6e81ff8" --request GET https://api.memstash.io/values/instance_ip)
            echo BACKEND INSTANCE IP FROM MEMSTASH $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            aws s3 cp ./dist s3://udapeople-6e81ff8 --recursive
      # Here's where you will add some code to rollback on failure      

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "e9:1e:77:66:76:a0:f9:77:ec:ba:6c:19:f8:e7:27:d7"
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run: cat /tmp/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar gzip curl
            apk add --update openssh-client
      - run:
          name: Compress Backend
          command: |
            echo printenv
            printenv >> ./backend/.env
            tar -C backend -czvf artifact.tar.gz .
            ls -la 
      - run:
          name: Deploy backend
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |           
            apk add --update curl tar gzip python3 py3-pip            
     
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: 6e81ff8" --request GET https://api.memstash.io/values/instance_ip)
            echo BACKEND INSTANCE IP FROM MEMSTASH $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            curl "${API_URL}"                    
      - run:
          name: Backend smoke test.
          command: |
            echo ${API_URL}
            curl "${API_URL}"
            
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_URL="http://http://udapeople-6e81ff8.s3-website-eu-west-1.amazonaws.com/"
            if curl -s ${FRONTEND_URL} | grep "Welcome"
            then
              return 1
            else
              return 0
            fi
      # Here's where you will add some code to rollback on failure     

workflows:
  default:
    jobs:
      
      - smoke-test
         