version: 2.1
orbs:
  slack: circleci/slack@4.1.1

            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend_build-ec66649a
      - run:
          name: Build front-end
          command: |
            cd frontend                    
            npm install
            npm run build    
            
      - slack/notify:
          event: fail          
          mentions: 'Build Failed'
          template: basic_fail_1        
      - save_cache:
          paths:
            - frontend/node_modules
            - frontend/dist
          key: frontend_build-ec66649a

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
    - checkout
    - restore_cache:
        keys: 
          - backend_build-ec66649a
    - run:
        name: Back-end build
        command: |
          cd backend        
          npm install          
          npm run build
    - slack/notify:
          event: fail          
          mentions: 'Build Failed'
          template: basic_fail_1 
    - save_cache:
          paths: 
            - backend/node_modules
            - backend/dist
          key: backend_build-ec66649a
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend_build-ec66649a
      - run:
          name: Test front-end
          command: |
            cd frontend     
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
    - checkout
    - restore_cache:
        keys: 
          - backend_build-ec66649a
    - run:
        name: Test Back-end
        command: |
          cd backend          
          npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend_build-ec66649a
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm update        
            npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend_build-ec66649a
      - run:
          name: Scan backend
          command: |
            cd backend
            npm update
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Installing dependencies
          command: |
            yum install -y tar gzip curl
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udacity-backend-ec66649a \
              --parameter-overrides ID="ec66649a"                
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udacity-frontend-ec66649a \
              --parameter-overrides ID="ec66649a"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            INSTANCE_IP=$(aws ec2 describe-instances --region eu-west-1 \
            --filters "Name=tag:Name,Values=backend-ec66649a" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text) >> ~/inventory.txt
            echo ${INSTANCE_IP}
            cat inventory.txt
            curl -H "Content-Type: text/plain" \
               -H "token: ec66649a" \
               --request PUT \
               --data ${INSTANCE_IP} \
               https://api.memstash.io/values/instance_ip
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure 

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "e9:1e:77:66:76:a0:f9:77:ec:ba:6c:19:f8:e7:27:d7"
      - attach_workspace:
          at: ~/
      - run: cat inventory.txt
      - run: cat ~/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ~/inventory.txt .circleci/ansible/configure-server.yml
            
      # Here's where you will add some code to rollback on failure  

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
     # Here's where you will add some code to rollback on failure

workflows:
  default:
    jobs:
      - build-frontend:
          context: Slack
      - build-backend      
      - deploy-infrastructure
      - configure-infrastructure:
          requires: [deploy-infrastructure]