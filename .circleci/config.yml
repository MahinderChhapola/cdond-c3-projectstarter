version: 2.1
orbs:
  slack: circleci/slack@4.1.1

            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend_build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Build front-end
          command: |
            cd frontend                    
            npm install
            npm run build    
            
      - slack/notify:
          event: fail          
          mentions: 'Build Failed'
          template: basic_fail_1        
      - save_cache:
          paths:
            - frontend/node_modules
            - frontend/dist
          key: frontend_build-${CIRCLE_WORKFLOW_ID}

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
    - checkout
    - restore_cache:
        keys: 
          - backend_build-${CIRCLE_WORKFLOW_ID}
    - run:
        name: Back-end build
        command: |
          cd backend        
          npm install          
          npm run build
    - slack/notify:
          event: fail          
          mentions: 'Build Failed'
          template: basic_fail_1 
    - save_cache:
          paths: 
            - backend/node_modules
            - backend/dist
          key: backend_build-${CIRCLE_WORKFLOW_ID}
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend_build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Test front-end
          command: |
            cd frontend     
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
    - checkout
    - restore_cache:
        keys: 
          - backend_build-${CIRCLE_WORKFLOW_ID}
    - run:
        name: Test Back-end
        command: |
          cd backend          
          npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend_build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm update        
            npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend_build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Scan backend
          command: |
            cd backend
            npm update
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udacity-backend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"                
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udacity-frontend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            INSTANCE_IP=$(aws ec2 describe-instances --region eu-west-1 \
            --filters 'Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}' \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)
            echo ${INSTANCE_IP}
            curl -H "Content-Type: text/plain" \
               -H "token: ${CIRCLE_WORKFLOW_ID}" \
               --request PUT \
               --data ${INSTANCE_IP} \
               https://api.memstash.io/values/instance_ip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure 

workflows:
  default:
    jobs:
      - build-frontend:
          context: Slack
      - build-backend      
      - deploy-infrastructure
      